# Final Project Report

For our final project, we decided to leverage the Ticketmaster API to recommend events based on user preferences. Users provide their city, state, and the maximum distance they are willing to travel. We then identify events happening nearby that are within the radius they are willing to go. The result of this is a personalized list of events that matches the user's location and traveling preferences, making it easier for them to discover and go to events near them.

## Data Description

The Ticketmaster Discovery API is a RESTful API that allows developers to search for and retrieve information about live events such as concerts, theater, and sports events, as well as when and where they are taking place. Specifically, we used the API's ability to filter events by city, state, and radius to identify events near them. We accessed details such as event name, venue, and date to provide users with personalized event recommendations. 

## Exploratory Data Analysis

```{python}
import numpy as np
import pandas as pd
```

Our exploratory data analysis (EDA) focused on understanding the distribution and characteristics of events in the top cities. First, we explored the number of events in the top 10 cities, with New York and Chicago having the most amount of events at nearly 1,000. 
![](top10cities.png)

Next, we expanded our analysis to the top 20 cities. This graph had a much more varied distribution of the number of events across these cities, ranging from 54 events in the city with the lowest frequency (San Jose) to 1,000 to the city with the highest frequency (New York).
![](top20citiesevents.png)

Additionally, we also looked at the distribution of the events by day of the week, finding that Friday and Saturday had the most events and Monday had the least. 
![](eventsdayofweek.png)

Lastly, we analyzed the event price ranges for the top 10 cities, revealing a wide spread of prices. Most events were concentrated on the lower side, but there were some events with prices that exceeded $1,200. 
![](eventpriceranges.png)

We also created an interactive map using Folium to visualize the distribution of events across the entire country. This map has markers for the top 20 cities, with color-coded markers indicating the amount of events. Red markers are cities with over 200 events, blue markers are cities with event counts between 100-200 events, and green markers are cities with below 100 events.


## Creation of Event Finder

We created a simple interface for users to interact with the Ticketmaster API. The user will provide three pieces of information: a US state, a US city within the given state, and how far they are willing to drive in miles. We process this data and then return to the user all of the events that Ticketmaster services in their area.

To do this we wrote four functions. The main function call is to `get_events_nearby`. This function first deals with gathering all of the cities within the travel radius using helper function `get_cities_within_radius`. This helper function uses the uscities.csv file and the geodesic Python library to find all of the cities within the provided travel radius. Then, `get_events_nearby` iterates through all of the cities in the travel radius and calls the helper function `handle_ambigious_city` for each one. This function deals with any duplicate city names within a state and gathers all of the events in the given city using the Ticketmaster API. Finally, `get_events_nearby` returns a list of all of the events occurring within the travel radius. All of the code for these functions can be found in `functions.py` in our repository.

Here is an example query the corresponding output. Suppose a user wants to see all the events within 20 miles of San Francisco, California.

```{python}
from functions import *

# Sample User Input
state = 'CA'
city = 'San Francisco'
radius = '20'

output = get_events_nearby(city, state, radius)

output_df = pd.DataFrame(output)

output_df.head()
```

After completing the functions for data processing and API interaction, we shifted our focus to developing the user interface. For this, we used the open-source Streamlit Python package. Streamlit enables developers to create web applications directly within Python, offering an intuitive and user-friendly framework that suited our needs perfectly. The code for implementing the web app is located in the `event_finder.py` file in our repository. Below is a preview of how the final product turned out:

![](eventfinder_image.png)

Here, the user searched for events within 40 miles of Los Angeles, California. In our final product, the dataframe is sorted by date to ensure that the user sees the events occurring soonest at the top, making it easier to prioritize upcoming events.